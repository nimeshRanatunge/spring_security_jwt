server.port=9090
spring.datasource.url=jdbc:mysql://localhost:3306/jwt_test
spring.datasource.username=root
spring.datasource.password=root
spring.sql.init.platform=mysql
spring.jpa.hibernate.ddl-auto=create
spring.main.allow-circular-references=true
#explicitly specifying one of these options, you are instructing Spring Boot on how to initialize the schema.
#
#Option	Effect
#none	No database Schema initialization
#create	Drops and creates the schema at the application startup. With this option, all your data will be gone on each startup.
#create-drop	Creates schema at the startup and destroys the schema on context closure. Useful for unit tests.
#validate	Only checks if the Schema matches the Entities. If the schema doesn?t match, then the application startup will fail.
# Makes no changes to the database.
#update	Updates the schema only if necessary. For example, If a new field was added in an entity, then it will simply alter the
# table for a new column without destroying the data.
#
#An entity is a lightweight persistence domain object. Typically, an entity represents a table in a relational database, and each
# entity instance corresponds to a row in that table.
#The entities are the persistence objects stores as a record in the database.

#POJO - Plain Old Java Object
#is a representation of a simple object like:
#
#class Student {
#
#private name;
#private surname;
#
#getter
#setter
#}
#
#In Spring it?s used to separate Model from Business logic and also part of Beans objects.
#So a POJO is your normal java class that has variables and methods. But what makes it Plain is the ?no business logic inside it?.

#As we discussed earlier, the spring.jpa.generate-ddl is a single switch that is applicable to hibernate or any other JPA vendor.
# If this is set to true, \
#  Spring Boot will ask the respective JPA vendor to initialize the database based on the entity definition.

#So what?s with spring.jpa.generate-ddl?
#As we discussed earlier, the spring.jpa.generate-ddl is a single switch that is applicable to hibernate or any other JPA vendor.
# If this is set to true, \
#  Spring Boot will ask the respective JPA vendor to initialize the database based on the entity definition.
#Data Definition Language (DDL) is a subset of SQL. It is a language for describing data and its relationships in a database.
#
#DDL: Definition
#Data definition language may sound like it's another programming language, but it's actually a method of categorizing the
# different types of SQL commands.
#
#Data definition language (DDL) refers to the set of SQL commands that can create and manipulate the structures of a database.
# DDL statements are used to create, change, and remove objects including indexes, triggers, tables, and views.
# Common DDL statements include:
#
#CREATE (generates a new table)
#ALTER (alters table)
#DROP (removes a table from the database)

#Advantages of Spring Boot Database Initialization
#There are few important advantages for which you should use Spring Boot?s database schema initialization feature.
#
#It reduces manual work of creating DDL for each tables and columns.
#Quick local developement setup time. No need to run long scripts manually.
#You can progressively update schema through the update option.
#The hibernate?s ?validate? option can identify missing schema items before application is ready. Saving lot of production headaches.
#The import.sql can setup test data without having to set it up every time.
#JUnit + embedded databases solve complex test case setups.
#As JPA takes care of the schema generation, The JPA vendor(hibernate) will always pick the right dialect for the DDL commands.
# This way you don?t have to worry about initialization scripts while moving to a different Database product.
#
